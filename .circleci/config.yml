version: 2
jobs:
  build:
    working_directory: ~/msu.lansing.codes
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other
    environment:
      # Sensitive data (like passwords) are set in the CircleCI web interface
      NODE_ENV: testing
      TZ: /usr/share/zoneinfo/America/Detroit
      YARN_VERSION: 1.7.0
    # Pre-built images list: https://circleci.com/docs/2.0/circleci-images/
    docker:
    - image: circleci/node:8.11.3-browsers
      command: /sbin/init
    - image: circleci/postgres:10.4-alpine-ram
    steps:
    # Setup PATH (can't do in environment section because PATH refers to itself)
    - run:
        working_directory: ~/msu.lansing.codes
        command: echo -e "export PATH=${PATH}:~/msu.lansing.codes/.yarn/bin:~/msu.lansing.codes/node_modules/.bin" >> $BASH_ENV
    # The following `checkout` command checks out your code to your working directory
    - checkout
    # Restore dependency caches
    - restore_cache:
        keys:
        - yarn-v1-{{ .Branch }}-{{ .Revision }}
        - yarn-v1-{{ .Branch }}-
        - yarn-v1-master-
        - yarn-v1-
    - restore_cache:
        keys:
        - frontend-deps-v1-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
        - frontend-deps-v1-{{ .Branch }}-
        - frontend-deps-v1-master-
        - frontend-deps-v1-
    - restore_cache:
        keys:
        - backend-deps-v1-{{ .Branch }}-{{ checksum "backend/yarn.lock" }}
        - backend-deps-v1-{{ .Branch }}-
        - backend-deps-v1-master-
        - backend-deps-v1-
    - restore_cache:
        keys:
        - test-deps-v1-{{ .Branch }}-{{ checksum "test/yarn.lock" }}
        - test-deps-v1-{{ .Branch }}-
        - test-deps-v1-master-
        - test-deps-v1-
    - restore_cache:
        keys:
        - base-deps-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - base-deps-v1-{{ .Branch }}-
        - base-deps-v1-master-
        - base-deps-v1-
    # Get the database ready for testing
    - run:
        name: install dockerize
        command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
        environment:
          DOCKERIZE_VERSION: v0.3.0
    - run:
        name: Wait for Postgres to start
        command: dockerize -wait tcp://localhost:5432 -timeout 1m
    - run: sudo apt-get update
    - run: sudo apt-get install postgresql-client
    - run:
        name: Create codelab database, user, and tables
        command: |
          psql -a -h localhost -p 5432 -U postgres -f ./database/scripts/ddl/00-db-and-users.ddl
          for sqlfile in `ls -1 ./database/scripts/ddl/*.sql | sort`; do
            echo Running ${sqlfile}
            psql -a -h localhost -p 5432 -w -U codelab_app -d codelab -f "${sqlfile}"
            if test $? -ne 0; then
              echo Error encountered running ${sqlfile}. Aborting...
              exit 1
            fi
          done
    # Ensure yarn and various cached directories are in place
    - run: |
        if [[ ! -e ~/.yarn/bin/yarn || $(yarn --version) != "${YARN_VERSION}" ]]; then
          curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version $YARN_VERSION
        fi
    - run: sudo mkdir -p ~/.cache/yarn frontend/node_modules backend/node_modules test/node_modules
    - run: sudo chmod -R 777 ~/.cache/yarn frontend/node_modules backend/node_modules test/node_modules
    # Install all dependencies (if necessary)
    - run: yarn install --pure-lockfile
    # Save dependency cache
    - save_cache:
        key: yarn-v1-{{ .Branch }}-{{ .Revision }}
        paths:
        - ~/.yarn
        - ~/.cache/yarn
    - save_cache:
        key: frontend-deps-v1-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
        paths:
        - frontend/node_modules
    - save_cache:
        key: backend-deps-v1-{{ .Branch }}-{{ checksum "backend/yarn.lock" }}
        paths:
        - backend/node_modules
    - save_cache:
        key: test-deps-v1-{{ .Branch }}-{{ checksum "test/yarn.lock" }}
        paths:
        - test/node_modules
    - save_cache:
        key: base-deps-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
        paths:
        - ./node_modules
    # Run unit and end-to-end tests
    - run: yarn test-all
    # Save test artifacts
    - store_artifacts:
        path: ./frontend/test/unit/coverage/frontend-coverage
    - store_artifacts:
        path: ./test/dist/e2e-reports
    - store_test_results:
        path: ./frontend/test/unit/coverage/frontend-coverage
    - store_test_results:
        path: ./test/dist/e2e-reports
  deploy_msu_staging:
    working_directory: ~/msu.lansing.codes
    docker:
    - image: docker:stable-git
    steps:
    - checkout
    - run:
        name: Deploy master branch to msu-codes-staging on Heroku
        command: .circleci/deploy-heroku.sh msu-codes-staging
  deploy_codelab517_staging:
    working_directory: ~/msu.lansing.codes
    docker:
    - image: docker:stable-git
    steps:
    - checkout
    - run:
        name: Deploy master branch to codelab517-staging on Heroku
        command: .circleci/deploy-heroku.sh codelab517-staging
  deploy_msu_production:
    working_directory: ~/msu.lansing.codes
    docker:
    - image: docker:stable-git
    steps:
    - checkout
    - run:
        name: Deploy production branch to msu-lansing-codes on Heroku
        command: .circleci/deploy-heroku.sh msu-lansing-codes
  deploy_codelab517_production:
    working_directory: ~/msu.lansing.codes
    docker:
    - image: docker:stable-git
    steps:
    - checkout
    - run:
        name: Deploy production branch to codelab517 on Heroku
        command: .circleci/deploy-heroku.sh codelab517

workflows:
  version: 2
  build_test_deploy:
    jobs:
    - build
    - deploy_msu_staging:
        requires:
        - build
        filters:
          branches:
            only: master
    - deploy_codelab517_staging:
        requires:
        - build
        filters:
          branches:
            only: master
    - deploy_msu_production:
        requires:
        - build
        filters:
          branches:
            only: msu-prod
    - deploy_codelab517_production:
        requires:
        - build
        filters:
          branches:
            only: codelab517-prod
